name: Publish Notes to Twitter

on:
  # Trigger after notes scraper completes successfully
  workflow_run:
    workflows: ["Substack Notes Scraper"]
    types:
      - completed

  # Allow manual trigger for testing
  workflow_dispatch:

jobs:
  publish-notes:
    runs-on: ubuntu-latest
    # Only run if the notes workflow succeeded (or if manually triggered)
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event.workflow_run.conclusion == 'success'

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install tweepy

      - name: Check for unpublished notes and post to Twitter
        env:
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
          TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        run: |
          python3 << 'EOF'
          import os
          import re
          import time
          from pathlib import Path
          from datetime import datetime
          import tweepy

          def parse_frontmatter(content):
              """Extract frontmatter from markdown content."""
              match = re.match(r'^---\n(.*?)\n---', content, re.DOTALL)
              if not match:
                  return {}

              frontmatter = {}
              for line in match.group(1).split('\n'):
                  if ':' in line:
                      key, value = line.split(':', 1)
                      frontmatter[key.strip()] = value.strip()
              return frontmatter

          def extract_content(content):
              """Extract main content from note (after frontmatter and metadata)."""
              # Remove frontmatter
              content = re.sub(r'^---\n.*?\n---\n+', '', content, flags=re.DOTALL)

              # Remove title heading (may have whitespace before it)
              content = re.sub(r'^\s*#\s+.*?\n+', '', content, flags=re.DOTALL)

              # Remove metadata section (**Published:** ... **Link:** ... \n---)
              content = re.sub(r'^\*\*Published:.*?^---\n+', '', content, flags=re.DOTALL | re.MULTILINE)

              return content.strip()

          def post_to_twitter(twitter_client, content, url):
              """Post note to Twitter using tweepy."""
              if not twitter_client:
                  print("⚠️  Twitter credentials not set, skipping post")
                  return True

              try:
                  # Format tweet
                  # Leave room for URL (23 chars) + formatting
                  max_content_length = 250

                  if len(content) > max_content_length:
                      tweet_text = content[:max_content_length].rsplit(' ', 1)[0] + '...\n\n'
                  else:
                      tweet_text = content + '\n\n'

                  tweet_text += f"👉 {url}"

                  # Ensure tweet doesn't exceed 280 characters
                  if len(tweet_text) > 280:
                      # Recalculate with smaller content
                      max_content_length = 280 - len(f"\n\n👉 {url}") - 3  # -3 for "..."
                      tweet_text = content[:max_content_length].rsplit(' ', 1)[0] + f'...\n\n👉 {url}'

                  # Post tweet
                  response = twitter_client.create_tweet(text=tweet_text)
                  tweet_id = response.data['id']

                  print(f"✓ Successfully posted to Twitter")
                  print(f"  Tweet ID: {tweet_id}")
                  print(f"  Length: {len(tweet_text)} chars")
                  print(f"  Preview: {tweet_text[:100]}...")

                  return True

              except tweepy.TweepyException as e:
                  print(f"✗ Twitter API error: {e}")
                  return False
              except Exception as e:
                  print(f"✗ Error posting to Twitter: {e}")
                  return False

          # Main logic
          notes_dir = Path('substack-scraper/notes')

          # Initialize Twitter client
          api_key = os.environ.get('TWITTER_API_KEY')
          api_secret = os.environ.get('TWITTER_API_SECRET')
          access_token = os.environ.get('TWITTER_ACCESS_TOKEN')
          access_token_secret = os.environ.get('TWITTER_ACCESS_TOKEN_SECRET')

          twitter_client = None
          if api_key and api_secret and access_token and access_token_secret:
              try:
                  twitter_client = tweepy.Client(
                      consumer_key=api_key,
                      consumer_secret=api_secret,
                      access_token=access_token,
                      access_token_secret=access_token_secret
                  )
                  print("✓ Twitter client initialized")
              except Exception as e:
                  print(f"✗ Failed to initialize Twitter client: {e}")
                  exit(1)
          else:
              print("✗ Twitter credentials not set. Please add secrets:")
              print("  - TWITTER_API_KEY")
              print("  - TWITTER_API_SECRET")
              print("  - TWITTER_ACCESS_TOKEN")
              print("  - TWITTER_ACCESS_TOKEN_SECRET")
              exit(1)

          if not notes_dir.exists():
              print(f"Notes directory not found: {notes_dir}")
              exit(0)

          published_count = 0

          # Iterate through all note folders
          for note_folder in sorted(notes_dir.iterdir()):
              if not note_folder.is_dir():
                  continue

              # Check if already published
              published_marker = note_folder / '.published'
              if published_marker.exists():
                  print(f"⏭️  Skipping {note_folder.name} (already published)")
                  continue

              # Read original_note.md
              note_file = note_folder / 'original_note.md'
              if not note_file.exists():
                  print(f"⚠️  No original_note.md in {note_folder.name}")
                  continue

              try:
                  with open(note_file, 'r', encoding='utf-8') as f:
                      content = f.read()

                  # Parse frontmatter and content
                  frontmatter = parse_frontmatter(content)
                  main_content = extract_content(content)

                  note_id = frontmatter.get('note_id', '')
                  note_url = frontmatter.get('url', '')

                  print(f"\n📝 Publishing note: {note_folder.name}")
                  print(f"   Note ID: {note_id}")
                  print(f"   URL: {note_url}")
                  print(f"   Content length: {len(main_content)} chars")

                  # Post to Twitter
                  if post_to_twitter(twitter_client, main_content, note_url):
                      # Mark as published
                      with open(published_marker, 'w') as f:
                          f.write(f"published_at: {datetime.utcnow().isoformat()}Z\n")

                      published_count += 1
                      print(f"✓ Marked as published")

                      # Rate limiting - wait 10 seconds before next post
                      time.sleep(10)
                  else:
                      print(f"✗ Failed to publish, will retry next run")

              except Exception as e:
                  print(f"✗ Error processing {note_folder.name}: {e}")
                  continue

          print(f"\n{'='*50}")
          print(f"Published {published_count} new note(s) to Twitter")
          print(f"{'='*50}")
          EOF

      - name: Check for changes
        id: git-check
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "New .published markers created"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No new notes published"
          fi

      - name: Commit published markers
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add substack-scraper/notes/**/.published
          git commit -m "Mark notes as published to Twitter

          🤖 Generated with [Claude Code](https://claude.com/claude-code)
          via [Happy](https://happy.engineering)

          Co-Authored-By: Claude <noreply@anthropic.com>
          Co-Authored-By: Happy <yesreply@happy.engineering>"
          git push
